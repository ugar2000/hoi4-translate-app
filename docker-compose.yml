services:
  # Database
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-translator}
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - app-network
      
  # Redis for queue management
  redis:
    image: redis:alpine
    restart: always
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network

  minio:
    image: minio/minio:RELEASE.2024-08-03T04-33-23Z
    command: server /data --console-address ":9001"
    env_file:
      - ./services/minio/.env
    environment:
      MINIO_SERVER_URL: http://minio:9000
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio-data:/data
    networks:
      - app-network
    restart: unless-stopped

  api-service:
    build:
      context: ./services/api-service
      dockerfile: ../../dockerfiles/api-service.Dockerfile
    env_file:
      - ./services/api-service/.env
    depends_on:
      - db
      - translation-service
      - minio
    ports:
      - "${API_SERVICE_PORT:-3005}:3005"
    networks:
      - app-network
    restart: unless-stopped

  translation-service:
    build:
      context: ./services/translation-service
      dockerfile: Dockerfile
    env_file:
      - ./services/translation-service/.env
    ports:
      - "${TRANSLATION_SERVICE_PORT:-4001}:4001"
    networks:
      - app-network
    restart: unless-stopped

  # Main Next.js Application
  web-app:
    build:
      context: .
      dockerfile: dockerfiles/web-app.Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - ./.env
    depends_on:
      - db
      - redis
      - api-service
    networks:
      - app-network
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next

  # Microsoft Translator Service
  translator-service:
    build:
      context: ./services/deepl-service
      dockerfile: ../../dockerfiles/translator-service.Dockerfile
    ports:
      - "${DEEPL_SERVICE_PORT:-3004}:3004"
    env_file:
      - ./services/deepl-service/.env
    networks:
      - app-network
    restart: unless-stopped

  # WebSocket Service
  websocket-service:
    build:
      context: ./services/websocket-service
      dockerfile: ../../dockerfiles/websocket-service.Dockerfile
    ports:
      - "${WEBSOCKET_SERVICE_PORT:-3001}:3001"
    env_file:
      - ./services/websocket-service/.env
    depends_on:
      - redis
      - translator-service
    networks:
      - app-network
    restart: unless-stopped

  # Variable Separator Service (placeholder - you may need to create this)
  variable-separator:
    build:
      context: ./services/variable-separator
      dockerfile: ../../dockerfiles/variable-separator.Dockerfile
    ports:
      - "${VARIABLE_SEPARATOR_PORT:-3003}:3003"
    env_file:
      - ./services/variable-separator/.env
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - full # Optional service, only starts with --profile full

networks:
  app-network:
    driver: bridge

volumes:
  redis-data:
  db-data:
  minio-data:
